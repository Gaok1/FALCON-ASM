name: build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_ext: .exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            bin_ext: .exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_ext: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_ext: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Linux deps (x86_64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          # Common native deps for clipboard/dialog crates on Linux
          sudo apt-get install -y \
            pkg-config libx11-dev libxfixes-dev libxi-dev \
            libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev \
            libxkbcommon-dev libwayland-dev libgtk-3-dev

      - name: Install cross (only for Linux aarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build (Windows or Linux x86_64)
        if: matrix.os == 'windows-latest' || (matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu')
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Build (Linux aarch64 via cross)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cross build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          OUT=target/${{ matrix.target }}/release/falconasm${{ matrix.bin_ext }}
          echo "artifact_path=$OUT" >> $GITHUB_OUTPUT
        id: prep

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: falconasm-${{ matrix.target }}
          path: ${{ steps.prep.outputs.artifact_path }}
          if-no-files-found: error

