# Falcon ASM ðŸ¦… â€“ Educational RISC-V (RV32I) Emulator

Falcon ASM combines a simple RISC-V emulator with a two-pass text assembler. It is written in Rust for study purposes, showing the **fetch â†’ decode â†’ execute** cycle.

## Project structure

```
src/
  main.rs
  falcon/
    arch.rs        # constants and opcodes
    asm/           # assembler (.text/.data, labels, pseudo instructions)
    decoder/       # u32 -> Instruction
    encoder/       # Instruction -> u32
    exec.rs        # execution loop
    memory.rs      # simple RAM
    registers.rs   # Cpu with x0..x31 and pc
docs/
  README.md
  format.md       # encoding formats and assembler rules
```

## Supported instruction set

- **R-type:** `ADD, SUB, AND, OR, XOR, SLL, SRL, SRA, SLT, SLTU, MUL, MULH, MULHSU, MULHU, DIV, DIVU, REM, REMU`
- **I-type (OP-IMM):** `ADDI, ANDI, ORI, XORI, SLTI, SLTIU, SLLI, SRLI, SRAI`
- **Loads:** `LB, LH, LW, LBU, LHU`
- **Stores:** `SB, SH, SW`
- **Branches:** `BEQ, BNE, BLT, BGE, BLTU, BGEU`
- **U/J:** `LUI, AUIPC, JAL`
- **JALR**
- **SYSTEM:** `ECALL`, `EBREAK`

*Missing:* FENCE/CSR and floating point.

## Assembler

- `.text` and `.data` segments (data starts at `base_pc + 0x1000`).
- `.byte` and `.word` directives to insert values in the data section.
- Labels in any segment; `la rd, label` emits `lui` + `addi`.
- Other pseudo-instructions: `nop`, `mv`, `li`, `subi`, `j`, `call`, `jr`, `ret`.

## Execution

Requires [Rust](https://rustup.rs).

```bash
cargo run
```

The example program in `main.rs` assembles a small routine, loads code and data into memory and executes until it encounters `ecall`.
