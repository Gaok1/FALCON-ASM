# Falcon ASM ü¶Ö ‚Äì Emulador Educacional RISC-V (RV32I)

Falcon ASM combina um emulador simples de RISC-V com um montador textual de
duas passagens. Foi escrito em Rust para fins de estudo, exibindo o ciclo
**fetch ‚Üí decode ‚Üí execute**.

## Estrutura do projeto

```
src/
  main.rs
  falcon/
    arch.rs        # constantes e opcodes
    asm/           # montador (.text/.data, r√≥tulos, pseudoinstru√ß√µes)
    decoder/       # u32 -> Instruction
    encoder/       # Instruction -> u32
    exec.rs        # loop de execu√ß√£o
    memory.rs      # RAM simples
    registers.rs   # Cpu com x0..x31 e pc
docs/
  README.md
  format.md       # descri√ß√£o de formatos e regras do montador
```

## Conjunto de instru√ß√µes suportado

- **R-type:** `ADD, SUB, AND, OR, XOR, SLL, SRL, SRA, SLT, SLTU, MUL, MULH, MULHSU, MULHU, DIV, DIVU, REM, REMU`
- **I-type (OP-IMM):** `ADDI, ANDI, ORI, XORI, SLTI, SLTIU, SLLI, SRLI, SRAI`
- **Loads:** `LB, LH, LW, LBU, LHU`
- **Stores:** `SB, SH, SW`
- **Branches:** `BEQ, BNE, BLT, BGE, BLTU, BGEU`
- **U/J:** `LUI, AUIPC, JAL`
- **JALR**
- **SYSTEM:** `ECALL`, `EBREAK`

*Em falta:* FENCE/CSR e ponto flutuante.

## Montador

- Segmentos `.text` e `.data` (dados iniciam em `base_pc + 0x1000`).
- Diretivas `.byte` e `.word` para inserir valores na se√ß√£o de dados.
- R√≥tulos em qualquer segmento; `la rd, label` gera `lui` + `addi`.
- Demais pseudoinstru√ß√µes: `nop`, `mv`, `li`, `subi`, `j`, `jr`, `ret`.

## Execu√ß√£o

Requer [Rust](https://rustup.rs).

```bash
cargo run
```

O programa exemplo em `main.rs` monta uma pequena rotina, carrega c√≥digo e
dados na mem√≥ria e executa at√© encontrar `ecall`.

